#!/bin/sh
#===============================================================================
#
#          FILE:  tails-backup-supersecrets
#
#         USAGE:  If this script already was added on the path (e.g. ~/bin), run:
#                     tails-backup-supersecrets
#
#   DESCRIPTION:  tails-backup-supersecrets IS AN DRAFT. Not tested
#                 Read also:
#                   - https://tails.boum.org/blueprint/backups/
#
#       OPTIONS:  1. File tails-backup-supersecrets.env (if exist) is sourced at
#                    start of the script.
#                 2. TAILS_BACKUP_SUPERSECRETS_PATHS can be pre-loaded with extra
#                    paths that you are sure do exist. Like
#                    TAILS_BACKUP_SUPERSECRETS_PATHS="/home/amnesia/password.kbdx /home/amnesia/.config /media/amnesia/usbstick/.ssh"
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Emerson Rocha <rocha[at]ieee.org>
#       COMPANY:  Etica.AI
#       LICENSE:  Public Domain
#       VERSION:  0.2
#       CREATED:  2020-10-26 22:34 UTC
#      REVISION:  2020-10-26 22:34 UTC v0.2 Creates a /tmp/supersecrets/${TIMESTAMP}.tar
#                                      from .ssh and .gnupg (both ~ and TailsData_unlocked)
#                 2020-10-27 01:05 UTC v0.5 tails-backup-supersecrets.env can be used
#                                      to add extra logic at startup
#===============================================================================
PROGRAM_START_DATETIME=$(date +%s)
PROGRAM_NAME=$(basename "$0")
set -e

TIMESTAMP=$(date +'%FT%T')

##### Source optional extra logic ______________________________________________
echo "$PROGRAM_NAME: this script optionally allows you to save variables from a file"
if [ -f "${0}.env" ];
then
    echo "$PROGRAM_NAME: ${0}.env exists. Sourcing now"
    # shellcheck source=/dev/null
    . "${0}.env"
    # echo "$PROGRAM_NAME: TAILS_BACKUP_SUPERSECRETS_PATHS now: $TAILS_BACKUP_SUPERSECRETS_PATHS"
else
    echo "$PROGRAM_NAME TIP: ${0}.env does not exist. Skiping"
fi

##### Working directory ________________________________________________________
### /tmp/supersecrets ..........................................................
# On tails /tmp is granted to run from RAM
if [ ! -d "/tmp/supersecrets" ];
then
    echo "$PROGRAM_NAME: Creating /tmp/supersecrets..."
    mkdir --mode=0700 /tmp/supersecrets
fi

#### /tmp/supersecrets/TIMESTAMP ................................................
## On tails /tmp is granted to run from RAM
#echo "$PROGRAM_NAME: Creating /tmp/supersecrets/${TIMESTAMP}"
#mkdir --mode=0700 "/tmp/supersecrets/${TIMESTAMP}"

##### Detect directories automatically include _________________________________

# TAILS_BACKUP_SUPERSECRETS_PATHS="/home/amnesia/.ssh ${TAILS_BACKUP_SUPERSECRETS_PATHS}"

if [ -n "$TAILS_BACKUP_SUPERSECRETS_PATHS" ];
then
    echo "$PROGRAM_NAME: TAILS_BACKUP_SUPERSECRETS_PATHS is empty. Ok. It can be used to append extra paths"
else
    echo "$PROGRAM_NAME: TAILS_BACKUP_SUPERSECRETS_PATHS already have these extra paths"
    echo "$PROGRAM_NAME:     $TAILS_BACKUP_SUPERSECRETS_PATHS"
fi

if [ -e "/home/amnesia/.ssh" ];
then
    TAILS_BACKUP_SUPERSECRETS_PATHS="/home/amnesia/.ssh ${TAILS_BACKUP_SUPERSECRETS_PATHS}";
fi

if [ -e "/home/amnesia/.gnupg" ];
then
    TAILS_BACKUP_SUPERSECRETS_PATHS="/home/amnesia/.gnupg ${TAILS_BACKUP_SUPERSECRETS_PATHS}";
fi

if [ -e "/live/persistence/TailsData_unlocked/openssh-client" ];
then
    TAILS_BACKUP_SUPERSECRETS_PATHS="/live/persistence/TailsData_unlocked/openssh-client ${TAILS_BACKUP_SUPERSECRETS_PATHS}";
fi

if [ -e "/live/persistence/TailsData_unlocked/gnupg" ];
then
    TAILS_BACKUP_SUPERSECRETS_PATHS="/live/persistence/TailsData_unlocked/gnupg ${TAILS_BACKUP_SUPERSECRETS_PATHS}";
fi

if [ -e "/home/amnesia/passwords.kbdx" ];
then
    TAILS_BACKUP_SUPERSECRETS_PATHS="/home/amnesia/passwords.kbdx ${TAILS_BACKUP_SUPERSECRETS_PATHS}";
fi

if [ -e "/live/persistence/TailsData_unlocked/Persistent/passwords.kbdx" ];
then
    TAILS_BACKUP_SUPERSECRETS_PATHS="/live/persistence/TailsData_unlocked/Persistent/passwords.kbdx ${TAILS_BACKUP_SUPERSECRETS_PATHS}";
fi

# echo "$PROGRAM_NAME: TAILS_BACKUP_SUPERSECRETS_PATHS: $TAILS_BACKUP_SUPERSECRETS_PATHS"

##### Compress and encrypt _____________________________________________________
### /tmp/supersecrets/TIMESTAMP.tar ............................................
# tar -cf
echo "$PROGRAM_NAME: tar..."
echo ""
set -x
# shellcheck disable=SC2086
# tar --hard-dereference -cvhf "/tmp/supersecrets/${TIMESTAMP}.tar" $TAILS_BACKUP_SUPERSECRETS_PATHS
tar --create \
    --verbose \
    --dereference \
    --hard-dereference \
    --file \
    "/tmp/supersecrets/${TIMESTAMP}.tar" $TAILS_BACKUP_SUPERSECRETS_PATHS
set +x
echo ""

# TODO: check first if folders do exist before trying to backup

##### Open directory & file for user manually inspect __________________________
### /tmp/supersecrets ..........................................................
# We will open the navigator for user see the end result and continue the
# backup procress
xdg-open /tmp/supersecrets

### /tmp/supersecrets ..........................................................
# Open the tar file
xdg-open "/tmp/supersecrets/${TIMESTAMP}.tar"

# @see https://risanb.com/code/backup-restore-gpg-key/
# @see https://gist.github.com/chrisroos/1205934
# @see https://superuser.com/questions/1110877/how-do-you-safely-backup-a-gpg-private-key

echo "$PROGRAM_NAME: TODO: finish tails-backup-supersecrets"

PROGRAM_END_DATETIME=$(date +%s)
PROGRAM_TIME=$((PROGRAM_END_DATETIME-PROGRAM_START_DATETIME))

echo "$PROGRAM_NAME Runtime: $PROGRAM_TIME"
exit 0
